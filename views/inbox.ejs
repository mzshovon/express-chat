<%- include('./partials/header.ejs'); %>
    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" />
      </div>
      <div id="conversation-list">
        <% data.forEach(function(conversation) { %>
          <!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
          <% if(conversation.creator.id == loggedInUser.userId) { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>', '<%= conversation.participant.status %>')">
              <% if (conversation.participant.profile_image) { %>
              <img src="./profileImages/<%= conversation.participant.profile_image %>" alt="<%= conversation.participant.name %>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.participant.name %> <span id="<%= conversation.participant.id %>-user-status" style="background-color: #069506;padding: 4px;margin: 10px;border-radius: 5px;visibility: hidden;">Active</span>
              </div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
              <div class="conversation-date"><%= conversation.participant.profile_image %></div>
            </div>
          <% } else { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>' , '<%= conversation.participant.status %>')">
              <% if (conversation.creator.profile_image) { %>
              <img src="./profileImages/<%= conversation.creator.profile_image %>" alt="<%= conversation.creator.name %>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.creator.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } %>
        <% }); %>
        
        <!-- show no conversation placeholder image for 0 conversations -->
        <% if(data && data.length === 0) { %>
          <div class="nothing"><img src="./images/no-conversation.svg"></div>
        <% } %>
      </div>

      <div class="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>

      <div id="chat-title">
          <span id="conversation-partner"></span>
      </div>

      <!-- placeholder div if no messages are in messages area -->
      <div id="chat-message-list">
        <div class="nothing">select a conversation</div>
      </div>
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment"><img src="./images/attachment.png" alt="Add Attachment" /></label>
        <input type="file" multiple name="attachment" class="hide" id="attachment" />
        <input type="text" name="message" placeholder="Type a message" data-emoji-picker="true" autocomplete="off" onkeypress="showTypingInRealTime(event)"/>
      </form>

    </div>
    <%- include('./partials/add-conversation-modal.ejs'); %>

    <!-- import socket io client from cdn -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" integrity="sha512-fD9DI5bZwQxOi7MhYWnnNPlvXdp/2Pj3XSTRrFs5FQa4mizyGLnJcN6tuvUS6LbmgN1ut+XGSABKvjN0H6Aoow==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="/js/emojiPicker.js"></script>
    <script>
      const form = document.querySelector('#chat-form');
      const messageContainer = document.querySelector('#chat-message-list');
      const chatTitleContainer = document.querySelector('#conversation-partner');
      const loggedinuserId = '<%= loggedInUser.userId %>';
      const loggedinUserName = '<%= loggedInUser.username %>';
      let participant = null; // selected conversation participant object
      let current_conversation_id; // selected conversation id
      var typing=false;
      var timeout=undefined;
      
      (() => {
        new EmojiPicker()
      })()

      const blockSuccessfull = Toastify({
        text: "User status changed successfully!",
        duration: 1000,
      });
      const blockFailed = Toastify({
        text: "Error changing status! Please contact with admin",
        duration: 2000,
      });

      // socket initialization
      const socket = io('<%= process.env.APP_URL %>');

      socket.once("connect", ()=> {
        socket.on("login", data => {
        let activeUserClass = document.getElementById(`${data.activeUsers.userId}-user-status`);
        activeUserClass.style.visibility = "visible";
        activeUserClass.innerText = "Active";
      });
      })

      // handle new/live incoming message from socket
      socket.on("new_message", data => {
        // only respond if current conversation is open in any client
        if(data.message.conversation_id == current_conversation_id) {
          // message class
          const messageClass = data.message.sender.id === loggedinuserId ? 'you-message' : 'other-message';
          
          const senderAvatar = data.message.sender.profile_image ? `<img src="./profileImages/${data.message.sender.profile_image}" alt="${data.message.sender.name}" />` : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;

          // message attachments
          let attachments = '<div class="attachments">';

          if(data.message.attachment && data.message.attachment.length > 0) {
            data.message.attachment.forEach(attachment => {
              attachments += `<img src="./attachments/${attachment}" /> `;
            });
          }

          attachments += '</div>';

          let messageHTML;

          // do not show avatar for loggedin user
          if(data.message.sender.id == loggedinuserId) {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          } else {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          }

          // append the inoming message to message area as last item
          document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);
        }
      });

      function viewBlockOrUnblockMessages(status, form) {
        if(status && status == "active") {
            form.style.visibility = "visible";
          } else {
            form.style.visibility = 'hidden';
          }
      }

      // get messages of a conversation
      async function getMessages(conversation_id, current_conversation_name, status){
        // messages failure toast
        const messagesFailureToast = Toastify({
          text: "Error loading messages!",
          duration: 1000,
        });

        let response = await fetch(`/inbox/messages/${conversation_id}`);
        let result= await response.json();

        if(!result.errors && result.data) {
            viewBlockOrUnblockMessages(status, form);
            const {data, user, conversation_id} = result;

            participant = data.participant;
            current_conversation_id = conversation_id;

            if(data.messages) {

              let allMessages = '';

              if(data.messages.length > 0) {
                data.messages.forEach((message) => {
                  let senderAvatar = message.sender.profile_image ? `./profileImages/${message.sender.profile_image}` : './images/nophoto.png';
                  const messageClass = message.sender.id === loggedinuserId ? 'you-message' : 'other-message';
                  // const userStatus = message.sender.status === loggedinuserId ? 'you-message' : 'other-message';
                  const showAvatar = message.sender.id === loggedinuserId ? '' : `<img src="${senderAvatar}" alt="${message.sender.name}" />`;

                  // message attachments
                  let attachments = '<div class="attachments">';

                  if(message.attachment && message.attachment.length > 0) {
                    message.attachment.forEach(attachment => {
                      attachments += `<img src="./attachments/${attachment}" /> `;
                    });
                  }

                  attachments += '</div>';

                  // final message html
                  let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      <div class="message-text">${message.text}</div>
                      ${attachments}
                      <div class="message-time">${moment(message.date_time).fromNow()}</div>
                    </div></div>`;

                  allMessages += messageHTML;
                  messageContainer.innerHTML = allMessages;
                });
              } else if(data.messages.length === 0) {
                messageContainer.innerHTML = '<div class="message-row"></div>';
              }
              let blockOrUnblockButtonElement = participant.status == 'blocked' ? 'Unblock' : 'Block';
              let blockButtonDesign = `<button class="block_btn" type="button" onclick="blockOrUnblockUser('${conversation_id}','${participant.id}')">
                                                                      ${blockOrUnblockButtonElement}</button>`;
              let blockButton = "";
              if((participant.blockedBy && loggedinuserId == participant.blockedBy && participant.status == "blocked")) {
                blockButton = blockButtonDesign;
              } else if(participant.blockedBy && loggedinuserId != participant.blockedBy && participant.status == "blocked") {
                blockButton = "<small>You are not allowed to continue this conversation</small>";
              } else {
                blockButton = blockButtonDesign;
              }
              let typingDisplay = `<span id="typingId" style="color: black;
                                              font-size: 12px;
                                              margin-left: 5px;
                                              padding: 7px;
                                              background: white;
                                              visibility: hidden;
                                              border-radius: 14px 14px 0 14px;"></span>`;
              let callSection = `<span style="float:right"><i class="fa-solid fa-phone" style="color:white;background: #6a6ab1;
                                        padding: 7px 10px;
                                        border: 2px solid;
                                        margin: 0px 17px;
                                        border-radius: 10px;" onclick="startVideoCall('${participant.id}','${participant.name}', '${conversation_id}')"></i>
                                        <i class="fa-solid fa-video-camera" style="color:white;background: #6a6ab1;
                                        padding: 7px 10px;
                                        border: 2px solid;
                                        border-radius: 10px;" onclick="startVideoCall('${participant.id}','${participant.name}', '${conversation_id}')"></i>
                                        </span>`;
              chatTitleContainer.textContent = current_conversation_name;
              chatTitleContainer.innerHTML = `${current_conversation_name} ${blockButton} ${callSection} ${typingDisplay}`;
            }
        } else {
          messagesFailureToast.showToast();
        }
    }

      // message sending
      form.onsubmit = async function (event) {
        event.preventDefault();

        const sendMessageFailureToast = Toastify({
          text: "Error sending message",
          duration: 1000,
        });

        // prepare the form data
        const formData = new FormData(form);
        formData.append('receiverId', participant.id);
        formData.append('receiverName', participant.name);
        formData.append('avatar', participant.profile_image || '');
        formData.append('conversationId', current_conversation_id);        
        // get response
        let result = await formSubmitOnSendMessage(formData);
        if (!result.errors) {
          form.reset(); // reset the form
        } else {
          sendMessageFailureToast.showToast();
        }
      }

      async function blockOrUnblockUser(conversationId, participantId){
        try{
          let response = await fetch("/inbox/block", {
            method: "POST",
            body: JSON.stringify({
              conversationId: conversationId,
              participantId: participantId,
            }),
            headers: {
              "Content-type": "application/json; charset=UTF-8",
            },
          });

          // get response
          const result = await response.json();
          if (!result.errors) {
            // reset
            users_placeholder.style.display = "none";
            input.value = name;
            blockSuccessfull.showToast();
            // reload the page after 1 second
            setTimeout(() => {
              location.reload();
            }, 2000);
          } else {
            throw new Error(result.errors.common.message);
          }
        } catch (err) {
          blockFailed.showToast();
        }
      }
      
      function showTypingInRealTime(e) {
        let blockButtonPosition = document.getElementById("typingId");
        if(e.which!=13){
          typing=true;
          socket.emit('typing', {user:{id : loggedinuserId, name : loggedinUserName}, typing:true});
          clearTimeout(timeout);
          timeout=setTimeout(typingTimeout, 2000);
        }else{
          clearTimeout(timeout);
          typingTimeout();
        }
        socket.on('display', (data)=>{
          if(data.typing==true){
            if(loggedinuserId != data.user.id) {
              
              blockButtonPosition.innerText = `${data.user.name} typing....`;
              blockButtonPosition.style.visibility = "visible";
            }
          }
          else{
            blockButtonPosition.style.visibility = "hidden";
          }
        });
      }
      
      function typingTimeout(){
          typing=false;
          socket.emit('typing', {user:user, typing:false})
      }

      socket.on("video_call_request", data => {
        if(data.videoRecieverInfo.receiverId == loggedinuserId) {
          videoCallRequestAlertBox(data.videoRecieverInfo.callerInfo.name, data.videoRecieverInfo.redirectUrl);
        }
      })

      async function startVideoCall(participantId, participantName, conversation_id){
        let randomizeUrlCall = `${loggedinuserId}!${Math.random()}!.${conversation_id}`;
        window.open(`/inbox/videoCall/${randomizeUrlCall}`,"_blank");
        // let formData = {
        //   message : `You are invited to join in this video call Link: <a href='/inbox/videoCall/${randomizeUrlCall}' target="_blank">Call Link</a>`,
        //   receiverId : participantId,
        //   receiverName : participantName,
        //   profile_image : null,
        //   conversationId : conversation_id,
        //   files : null,
        //   attachment : null
        // };
        // let result = await formSubmitOnSendMessage(formData, true);
        // if (!result.errors) {
        //   window.open(`/inbox/videoCall/${randomizeUrlCall}`,"_blank");
        // } else {
        //   sendMessageFailureToast.showToast();
        // }
      }

      async function formSubmitOnSendMessage(formData, formDataHeader = false){
        let headers = formDataHeader ? {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          } : {};
        let body = formDataHeader ? JSON.stringify(formData) : formData;

        let response = await fetch("/inbox/message", {
          headers: headers,
          method: "POST",
          body: body,
        });
        // get response
        return await response.json();
      }

      function videoCallRequestAlertBox(text, redirectUrl){
        Swal.fire({
            text: `${text} sent request for video calling....`,
            imageUrl: '/images/video-camera.png',
            imageWidth: 60,
            imageHeight: 60,
            imageAlt: 'Custom image',
            showCancelButton: true,
            confirmButtonText: 'Accept',
            cancelButtonText: 'Reject',
          }).then((result) => {
            if (result.isConfirmed) {
              Swal.close();
              window.open(`/inbox/videoCall/${redirectUrl}`,"_self");
            } else {
              socket.disconnect();
              console.log("Call cancelled");
            }
          })
      }
    </script>
  </body>
</html>
