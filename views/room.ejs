<!DOCTYPE html>
<html>
<head>
<style>
    * {
    margin: 0;
    padding: 0;
    }
    .header {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 8vh;
    width: 100%;
    background-color: var( — main-darklg);
    }
    .logo > h3 {
    color: var( — main-light);
    }
    .main {
    overflow: hidden;
    height: 92vh;
    display: flex;
    }
    .main__left {
    flex: 0.7;
    display: flex;
    flex-direction: column;
    }
    .videos__group {
    flex-grow: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    background-color: var( — main-dark);
    }
    video {
    height: 300px;
    border-radius: 1rem;
    margin: 0.5rem;
    width: 400px;
    object-fit: cover;
    transform: rotateY(180deg);
    -webkit-transform: rotateY(180deg);
    -moz-transform: rotateY(180deg);
    }
    .options {
    padding: 1rem;
    display: flex;
    background-color: var( — main-darklg);
    }
    .options__left {
    display: flex;
    }
    .options__right {
    margin-left: auto;
    }
    .options__button {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var( — primary-color);
    height: 50px;
    border-radius: 5px;
    color: var( — main-light);
    font-size: 1.2rem;
    width: 50px;
    margin: 0 0.5rem;
    }
    .background__red {
    background-color: #f6484a;
    }
    .main__right {
    flex: 0.3;
    background-color: #242f41;
    }
    .main__chat_window {
    flex-grow: 1;
    }
    .main__message_container {
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    }
    .main__message_container > input {
    height: 50px;
    flex: 1;
    border-radius: 5px;
    padding-left: 20px;
    border: none;
    }
    #video-grid {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    }
</style>
</head>
<body>
    <div class="header">
      <div class="logo">
        <h3>Video Chat</h2>
      </div>
    </div>
    <div class="main">
      <div class="main__left">
        <div class="videos__group">
          <div id="video-grid"></div>
        </div>
        <div class="options">
          <div class="options__left">
            <div class="options__button">
              <i class="fa fa-video-camera" aria-hidden="true"></i>
            </div>
          <div class="options__button">
              <i class="fa fa-microphone" aria-hidden="true"></i>
          </div>
         </div>
         <div class="options__right">
           <div class="options__button background__red">
             <i class="fa fa-phone" aria-hidden="true"></i>
           </div>
         </div>
       </div>
      </div>
    </div>
    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>
    <script>
      const ROOM_ID = "<%= roomId %>";
      const socket = io("/");
      const videoGrid = document.getElementById("video-grid");
      const myVideo = document.createElement("video");
      myVideo.muted = true;
      var peer = new Peer(undefined, {
        host: "/",
        path: "/peerjs",
        port: 4343
        // config: {'iceServers': [
        //   { url: 'stun:stun.l.google.com:19302' },
        //   { url: 'turn:homeo@turn.bistri.com:80', credential: 'homeo' }
        // ]} 
      });
      console.log("peers", peer);
      const peers = {};
      let myVideoStream;
      navigator.mediaDevices
      .getUserMedia({
        audio: true,
        video: false,
      })
      .then((stream) => {
        myVideoStream = stream;
        addVideoStream(myVideo, stream);
        peer.on("call", (call) => {
          call.answer(stream);
          const video = document.createElement("video");
          call.on("stream", (userVideoStream) => {
            addVideoStream(video, userVideoStream);
          });
        });
        socket.on("user-connected", (userId) => {
          connectToNewUser(userId, stream);
        });
      });

      socket.on('user-disconnected', userId => {
        if (peers[userId]) peers[userId].close()
      });

      peer.on("open", (id) => {
        socket.emit("join-room", ROOM_ID, id);
      });

      const connectToNewUser = (userId, stream) => {
        const call = peer.call(userId, stream);
        const video = document.createElement("video");
        call.on("stream", (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
          video.remove()
        })

        peers[userId] = call;
      };

      const addVideoStream = (video, stream) => {
        video.srcObject = stream;
        video.addEventListener("loadedmetadata", () => {
          video.play();
        });
        videoGrid.append(video);
      };

    </script>
  </body>
</html>